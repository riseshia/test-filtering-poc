#!/usr/bin/env ruby

require "json"
require "optparse"
require "set"

# bin/calculate-target-test --diff-file=<path> --map-file=<path> --delimiter=,
options = { diff_file_path: nil, map_file_path: nil, delimiter: " " }

opt = OptionParser.new
opt.on("--diff-file=<path>") {|v| options[:diff_file_path] = v }
opt.on("--map-file=<path>") {|v| options[:map_file_path] = v }
opt.on("--output-delimiter=<val>", "Specify delimiter when output target tests. default: whitespace.") {|v| options[:delimiter] = v }
opt.parse!(ARGV)

if options.values.compact.size != 3
  puts "--diff-file and --map-file are required"
  exit 1
end

diff = JSON.parse(File.read(options[:diff_file_path]))
map_info = JSON.parse(File.read(options[:map_file_path]))
map = map_info["map"]
revision = map_info["revision"]

# target calculate policy:
# codes:
#   added: ignore(if user write test, which covers it)
#   modified: execute associated test
#   deleted: execute associated test
# tests:
#   added: execute it
#   modified: execute it
#   deleted: ignore

added_codes = []
modified_codes = []
deleted_codes = []

added_tests = []
modified_tests = []
deleted_tests = []

diff.each do |diff_info|
  path = diff_info["filename"]
  if path.start_with?("spec/")
    case diff_info["status"]
    when "added"
      added_tests << path
    when "modified"
      modified_tests << path
    when "deleted"
      deleted_tests << path
    end
  else
    case diff_info["status"]
    when "added"
      added_codes << path
    when "modified"
      modified_codes << path
    when "deleted"
      deleted_codes << path
    end
  end
end

target_tests = Set.new

(modified_codes + deleted_codes).each do |path|
  list = map[path] || []

  list.each do |suspect_test_path|
    target_tests << suspect_test_path
  end
end

(added_tests + modified_tests).each do |path|
  target_tests << path
end

puts target_tests.to_a.join(options[:delimiter])
