# frozen_string_literal: true

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require "calleree"
require "set"
require "json"

module CalleeCallerMap
  module_function

  def add(caller, callee)
    cache[callee] ||= Set.new
    cache[callee].add(caller)
  end

  def revision
    revision_path = File.expand_path("../../REVISION", __FILE__)
    if File.exist?(revision_path)
      File.read(revision_path).strip
    else
      "UNKNOWN"
    end
  end

  def dump
    data = { revision: revision, map: cache.transform_values(&:to_a) }
    File.write("log/file-to-associated-tests-map.json", JSON.dump(data))
  end

  def cache
    @cache ||= {}
  end
end

require "capybara/rspec"
# require "capybara/apparition"
# Capybara.register_driver :apparition do |app|
#   Capybara::Apparition::Driver.new(app, { headless: true })
# end
# Capybara.javascript_driver = :apparition

RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2" expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://relishapp.com/rspec/rspec-core/docs/configuration/zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  # config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  config.before(:suite) do
    Calleree.start
  end
  # config.before(:each) do
  #   puts "before each"
  # end

  def project_path
    @project_path ||= File.expand_path("../../", __FILE__)
  end

  def format_path(path)
    if path&.start_with?(project_path)
      path.sub(project_path + "/", "")
    else
      path
    end
  end

  config.after(:each) do
    res = Calleree.result(clear: true)

    caller_in_project = res.select do |(caller_info, _callee_info, _count)|
      caller_path = caller_info.first
      caller_path&.start_with?(project_path)
    end.map do |(caller_info, _callee_info, _count)|
      format_path(caller_info.first)
    end

    called_in_project = res.select do |(_caller_info, callee_info, _count)|
      callee_path = callee_info.first
      callee_path&.start_with?(project_path)
    end.map do |(_caller_info, callee_info, _count)|
      format_path(callee_info.first)
    end
    all_related_paths = (called_in_project + caller_in_project).uniq

    target_test_file_path = format_path(self.class.declaration_locations.last[0])

    all_related_paths.each do |path|
      next if path.start_with?("spec/")

      unless path == target_test_file_path
        CalleeCallerMap.add(target_test_file_path, path)
      end
    end
  end

  config.after(:suite) do
    Calleree.stop
    CalleeCallerMap.dump
  end
end
